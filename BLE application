/* Copyright (c) 2014 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/** @file
 *
 * @defgroup ble_sdk_uart_over_ble_main main.c
 * @{
 * @ingroup  ble_sdk_app_mag_eval
 * @brief    UART over BLE application main file.
 *
 * This file contains the source code for a sample application that uses the Nordic UART service.
 * This application uses the @ref srvlib_conn_params module.
 */

#include <SEGGER_RTT.h>
#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include "nordic_common.h"
#include "nrf.h"
#include "nrf51_bitfields.h"
#include "nrf_gpio.h"
#include "ble_hci.h"
#include "ble_advdata.h"
#include "ble_advertising.h"
#include "ble_conn_params.h"
#include "softdevice_handler.h"
#include "app_timer.h"
#include "ble_mag.h"
#include "app_util_platform.h"
#include "twi_master.h"
#include "twi_master_config.h"
#include "nrf_delay.h"



#define IS_SRVC_CHANGED_CHARACT_PRESENT 0                                           /**< Include the service_changed characteristic. If not enabled, the server's database cannot be changed for the lifetime of the device. */

#define MAG_SERVICE_UUID_TYPE           BLE_UUID_TYPE_VENDOR_BEGIN                  /**< UUID type for the Nordic UART Service (vendor specific). */

#define APP_ADV_INTERVAL                1920                                   				/**< The advertising interval (in units of 0.625 ms. This value corresponds to 1200 ms). */
#define APP_ADV_TIMEOUT_IN_SECONDS      0                                      	  		/**< The advertising timeout (in units of seconds). */

#define APP_TIMER_PRESCALER           	10    
#define APP_TIMER_MAX_TIMERS            6                													 	/**< Maximum number of simultaneously created timers. */
#define APP_TIMER_OP_QUEUE_SIZE         6                                           /**< Size of timer operation queues. */

#define MIN_CONN_INTERVAL               MSEC_TO_UNITS(20, UNIT_1_25_MS)             /**< Minimum acceptable connection interval (20 ms), Connection interval uses 1.25 ms units. */
#define MAX_CONN_INTERVAL               MSEC_TO_UNITS(75, UNIT_1_25_MS)             /**< Maximum acceptable connection interval (75 ms), Connection interval uses 1.25 ms units. */

#define SLAVE_LATENCY                   0                                           /**< Slave latency. */
#define CONN_SUP_TIMEOUT                MSEC_TO_UNITS(4000, UNIT_10_MS)             /**< Connection supervisory timeout (4 seconds), Supervision Timeout uses 10 ms units. */
#define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(5000, 0)  									/**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (5 seconds). */
#define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(30000, 0) 									/**< Time between each call to sd_ble_gap_conn_param_update after the first call (30 seconds). */
#define MAX_CONN_PARAMS_UPDATE_COUNT    3                                           /**< Number of attempts before giving up the connection parameter negotiation. */

#define DEAD_BEEF                       0xDEADBEEF                                  /**< Value used as error code on stack dump, can be used to identify stack location on stack unwind. */

static ble_mag_t                        m_mag;                                      /**< Structure to identify the Nordic UART Service. */
static uint16_t                         m_conn_handle = BLE_CONN_HANDLE_INVALID;    /**< Handle of the current connection. */
static ble_gap_adv_params_t 						m_adv_params;                                 					/**< Parameters to be passed to the stack when starting advertising. */

static ble_uuid_t                       m_adv_uuids[] = {{BLE_UUID_MAG_SERVICE, MAG_SERVICE_UUID_TYPE}};  /**< Universally unique service identifier. */
app_timer_id_t         									timer_ID;
app_timer_id_t 													TIMER0_Advertise;

/**@brief Function for assert macro callback.
 *
 * @details This function will be called in case of an assert in the SoftDevice.
 *
 * @warning This handler is an example only and does not fit a final product. You need to analyse 
 *          how your product is supposed to react in case of Assert.
 * @warning On assert from the SoftDevice, the system can only recover on reset.
 *
 * @param[in] line_num    Line number of the failing ASSERT call.
 * @param[in] p_file_name File name of the failing ASSERT call.
 */
void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
{
    app_error_handler(DEAD_BEEF, line_num, p_file_name);
}


/**@brief Function for initializing the Advertising functionality.
 */
static void advertising_init(void)
{		
		SEGGER_RTT_WriteString(0, "I am in advertising_init\r\n");
    uint32_t      err_code;	
    ble_advdata_t advdata;
    ble_advdata_t scanrsp;
	
	  // Variables used for manufacturer specific data
    ble_advdata_manuf_data_t adv_manuf_data;
    uint8_array_t            adv_manuf_data_array;
		uint8_t 								 adv_manuf_data_data[1];
	
    // Build advertising data struct to pass into @ref ble_advertising_init.
    memset(&advdata, 0, sizeof(advdata));
    advdata.name_type          = BLE_ADVDATA_SHORT_NAME;
    advdata.include_appearance = true;
    advdata.flags              = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;

		// Configuration of manufacturer specific data
		adv_manuf_data_data[0] = 0x15;

    adv_manuf_data_array.p_data = adv_manuf_data_data;
    adv_manuf_data_array.size = 1;
		adv_manuf_data.company_identifier = 0xFF00;
    adv_manuf_data.data = adv_manuf_data_array; 
		advdata.p_manuf_specific_data = &adv_manuf_data;
			
		memset(&scanrsp, 0, sizeof(scanrsp));
    scanrsp.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
    scanrsp.uuids_complete.p_uuids  = m_adv_uuids;
		
    ble_adv_modes_config_t options = {0};
    options.ble_adv_fast_enabled  = BLE_ADV_FAST_ENABLED;
    options.ble_adv_fast_interval = APP_ADV_INTERVAL;
    options.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;

    err_code = ble_advertising_init(&advdata, &scanrsp, &options, NULL, NULL);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for the GAP initialization.
 *
 * @details This function will set up all the necessary GAP (Generic Access Profile) parameters of 
 *          the device. It also sets the permissions and appearance.
 */
static void gap_params_init(void)
{

    uint32_t                err_code;
    ble_gap_conn_params_t   gap_conn_params;
    ble_gap_conn_sec_mode_t sec_mode;

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
    
    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *)nombre,
                                          strlen(nombre));
    APP_ERROR_CHECK(err_code);

    memset(&gap_conn_params, 0, sizeof(gap_conn_params));

    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
    gap_conn_params.slave_latency     = SLAVE_LATENCY;
    gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;

    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
    APP_ERROR_CHECK(err_code);
}


void TIMER0_Advertise_init(void * p_context)
{
	advertising_init();	
}


/**@brief Function for handling an event from the Connection Parameters Module.
 *
 * @details This function will be called for all events in the Connection Parameters Module
 *          which are passed to the application.
 *
 * @note All this function does is to disconnect. This could have been done by simply setting
 *       the disconnect_on_fail config parameter, but instead we use the event handler
 *       mechanism to demonstrate its use.
 *
 * @param[in] p_evt  Event received from the Connection Parameters Module.
 */
static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
{
    uint32_t err_code;
    
    if(p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
    {
        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling errors from the Connection Parameters module.
 *
 * @param[in] nrf_error  Error code containing information about what went wrong.
 */
static void conn_params_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}


/**@brief Function for initializing the Connection Parameters module.
 */
static void conn_params_init(void)
{		
		SEGGER_RTT_WriteString(0, "conn_params_init!\r\n");
	
    uint32_t               err_code;
    ble_conn_params_init_t cp_init;
    
    memset(&cp_init, 0, sizeof(cp_init));

    cp_init.p_conn_params                  = NULL;
    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
    cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
    cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
    cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
    cp_init.disconnect_on_fail             = false;
    cp_init.evt_handler                    = on_conn_params_evt;
    cp_init.error_handler                  = conn_params_error_handler;
    
    err_code = ble_conn_params_init(&cp_init);
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for the Application's S110 SoftDevice event handler.
 *
 * @param[in] p_ble_evt S110 SoftDevice event.
 */
static void on_ble_evt(ble_evt_t * p_ble_evt)
{
    uint32_t                         err_code;
    
    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
            //APP_ERROR_CHECK(err_code);
						SEGGER_RTT_WriteString(0, "Connected \n"); 
            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
            break;
            
        case BLE_GAP_EVT_DISCONNECTED:
            //APP_ERROR_CHECK(err_code);
						SEGGER_RTT_WriteString(0, "Disconnected from peer \n");
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
						break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
						SEGGER_RTT_WriteString(0, "Pairing nor supported \n");
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;
        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
						SEGGER_RTT_WriteString(0, "No system attributes have been stored \n");
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;
				case BLE_GAP_EVT_TIMEOUT:
						SEGGER_RTT_WriteString(0, "Timeout expired \n");
            break;
				
        default:
            // No implementation needed.
            break;
    }
}


/**@brief Function for dispatching a S110 SoftDevice event to all modules with a S110 SoftDevice 
 *        event handler.
 *
 * @details This function is called from the S110 SoftDevice event interrupt handler after a S110 
 *          SoftDevice event has been received.
 *
 * @param[in] p_ble_evt  S110 SoftDevice event.
 */
static void ble_evt_dispatch(ble_evt_t * p_ble_evt)
{
    ble_conn_params_on_ble_evt(p_ble_evt);
    ble_mag_on_ble_evt(&m_mag, p_ble_evt);
    on_ble_evt(p_ble_evt);
    ble_advertising_on_ble_evt(p_ble_evt);
}

/**@brief Function for the S110 SoftDevice initialization.
 *
 * @details This function initializes the S110 SoftDevice and the BLE event interrupt.
 */
static void ble_stack_init(void)
{
    uint32_t err_code;
    SEGGER_RTT_WriteString(0, "I am in ble_stack_init!\r\n");
	
    // Initialize SoftDevice.
    SOFTDEVICE_HANDLER_INIT(NRF_CLOCK_LFCLKSRC_XTAL_20_PPM, NULL);
    // Enable BLE stack.
    ble_enable_params_t ble_enable_params;
    memset(&ble_enable_params, 0, sizeof(ble_enable_params));
#ifdef S130
    ble_enable_params.gatts_enable_params.attr_tab_size   = BLE_GATTS_ATTR_TAB_SIZE_DEFAULT;
#endif
    ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT;
    err_code = sd_ble_enable(&ble_enable_params);
    APP_ERROR_CHECK(err_code);
    
    // Subscribe for BLE events.
    err_code = softdevice_ble_evt_handler_set(ble_evt_dispatch);
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for placing the application in low power state while waiting for events.
 */
static void power_manage(void)
{		
    SEGGER_RTT_WriteString(0, "Power manager (Durmiendo)!\r\n");
    uint32_t err_code = sd_app_evt_wait();
    APP_ERROR_CHECK(err_code);
}	

/**@brief Function for handling the data from the MAGNETOMETER 3110 Service.
 *
 * @details This function will process the data received from the Nordic MAG BLE Service
 *
 * @param[in] p_mag    Nordic MAG Service structure.
 * @param[in] p_data   Data to be send to master device
 * @param[in] length   Length of the data.
 */
/**@snippet [Handling the data received over BLE] */
static void mag_data_handler(ble_mag_t *p_mag, uint8_t *p_data, uint16_t length)
{
	SEGGER_RTT_printf(0, "Estoy recibiendo datos de BLE %d  \n", control);
		uint32_t	err_code;
		uint8_t i=0,j=0,fin=0,k=0,z=0;
		uint16_t numero=0x00;
		char auxiliar[5];
		uint8_t indice_aux=0x00;

		//Despues se inicializa la fecha de instalación
		if(control=='f')
		{
			switch(p_data[0]){
				case 'f':
					datos[0]='I';
					datos[indice]='<';
					indice_ultimo=indice;
					indice++;
					for(i=1;i<length;i++)
					{
						datos[indice]=p_data[i];
						indice++;
					}
					datos[indice]='#';
					indice++;
					ind_contador_h=indice;
					datos[indice]=0x00;
					indice++;
					datos[indice]=0x00;
					indice++;
					datos[indice]='#';
					indice++;
					indice_maximo=indice;
					datos[indice]=0x00;
					indice++;
					datos[indice]=0x00;
					indice++;
					datos[indice]='-';
					indice++;
					for(i=0;i<4;i++)
					{
						datos[indice]=n_max[i];
						indice++;
					}						
					datos[indice]='#';
					indice++;
					color=0x01;
					medida();
	
			app_timer_start(timer_ID, 32768, NULL);	//10 sec con 10 prescaler
		  //app_timer_start(TIMER0_Advertise, 2000, NULL);	//2 sec con 10 prescaler		
			//app_timer_start(TIMER0_Advertise, 32768, NULL);	//120 sec con 120 prescaler
			//app_timer_start(timer_ID, 983040, NULL);	//1 hora con 120 prescaler
					break;
				case 'x':
						err_code = sd_ble_gap_disconnect(m_conn_handle,BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
					break;
				default:
					err_code = ble_mag_string_send(&m_mag, "NI", 2);
					if (err_code != NRF_ERROR_INVALID_STATE)
					{
						APP_ERROR_CHECK(err_code);
					}
					break;
			}
		//A la espera de recibir una petición de datos
		}else if(control!='f'){
			switch(p_data[0])
			{
			case 'x':
					err_code = sd_ble_gap_disconnect(m_conn_handle,BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
					break;
			case 'd':
					memset(datos_aux, 0, 500);
					i=indice_ultimo+1;
					j=0;
					z=0;
					while(datos[i]!='!')
					{
						if(datos[i]=='#'||datos[i]=='|'||datos[i]=='r'||datos[i]=='a')
						{
							datos_aux[j]=datos[i];
							j++;
							i++;
							if(datos[i]!='!')
							{
								numero=0x00;
								numero=((datos[i]&0x00FF)<<8);
								i++;
								numero=datos[i]|numero;
								memset(auxiliar, 0, 5);
								itoa(numero,auxiliar);
								for(z=0;z<strlen(auxiliar);z++){
									datos_aux[j]=auxiliar[z];
									j++;
								}
							}else{
								datos_aux[j]=datos[i];
								j++;
								i--;
							}
						}else{
							datos_aux[j]=datos[i];
							j++;
						}
						i++;
					}
					datos_aux[j]=datos[i];
					fin=0;
					indice_aux=0;
					while(fin==0)
					{
							datos_ble[0]='&';
							i=1;
							while((fin==0)&&(i<20))
							{
								datos_ble[i]=datos_aux[indice_aux];
								if(datos_aux[indice_aux]=='!'){
									fin=1;
									datos_ble[i]='$';
								}
								i++;
								indice_aux++;
							}
							j+=19;
							err_code = ble_mag_string_send(&m_mag, datos_ble, i);
							memset( datos_ble, 0, 20 );
							if (err_code != NRF_ERROR_INVALID_STATE)
							{
								APP_ERROR_CHECK(err_code);
							}
					}	
				break;
			case 't':
					memset(datos_aux, 0, 500);
					fin=0;
					indice_aux=0;
					while(fin==0){
						indice_aux++;
						if(datos[indice_aux]=='<'){
							fin=1;
							if(indice_aux==indice_ultimo)fin=2;
						}
					}
					i=indice_aux+1;
					j=0;
					z=0;
					while(fin==1)
					{
						if((datos[i]=='#'||datos[i]=='|'||datos[i]=='r'||datos[i]=='a'))
						{
							datos_aux[j]=datos[i];
							j++;
							i++;
							if((datos[i]!='<'))
							{
								numero=0x00;
								numero=((datos[i]&0x00FF)<<8);
								i++;
								numero=datos[i]|numero;
								memset(auxiliar, 0, 5);
								itoa(numero,auxiliar);
								for(z=0;z<strlen(auxiliar);z++){
									datos_aux[j]=auxiliar[z];
									j++;
								}
							}else{
								if(i!=indice_ultimo)
								{
									datos_aux[j]=datos[i];
									j++;
								}else{
									fin=0;
									datos_aux[j]='!';
								}
							}
						}else{
							if(i!=indice_ultimo)
							{
								datos_aux[j]=datos[i];
								j++;
							}else{
								fin=0;
								datos_aux[j]='!';
							}
						}
						i++;
					}
					
					if(fin!=2)
					{
						fin=0;
						j=0;
						while(fin==0)
						{
							datos_ble[0]='&';
							i=1;
							while((fin==0)&&(i<20))
							{
								datos_ble[i]=datos_aux[j];
								if(datos_aux[j]=='!'){
									fin=1;
									datos_ble[i]='$';
								}
								i++;
								j++;
							}
							err_code = ble_mag_string_send(&m_mag, datos_ble, i);
							memset( datos_ble, 0, 20 );
							if (err_code != NRF_ERROR_INVALID_STATE)
							{
								APP_ERROR_CHECK(err_code);
							}
						}
					}else{
						err_code = ble_mag_string_send(&m_mag, "NO", 2);
						if (err_code != NRF_ERROR_INVALID_STATE)
						{
							APP_ERROR_CHECK(err_code);
						}
					}
				break;
				
			case 'i':
					err_code = ble_mag_string_send(&m_mag, "I1", 2);
					if (err_code != NRF_ERROR_INVALID_STATE)
					{
						APP_ERROR_CHECK(err_code);
					}
					break;
					
			case '5':
					j=2;
					k=0;		
					for(i=1;i<13;i++)
					{
						if(datos[j]!=p_data[i])k++;
						j++;
					}
					if(k==0){
						indice--;
						memset( n_max, 0, 4 );
						n_max[1]='.';
						max=0.0;
						cambio=false;
						control='f';
						contador_h=0;
						contador=0;
						app_timer_stop(timer_ID);
						app_timer_stop(TIMER0_Advertise);
						err_code = ble_mag_string_send(&m_mag, "OK", 2);
						if (err_code != NRF_ERROR_INVALID_STATE)
						{
							APP_ERROR_CHECK(err_code);
						}
					}
					break;
			default:
				memset(datos_aux, 0, 500);
					i=indice_ultimo+1;
					j=0;
					z=0;
					while(datos[i]!='!')
					{
						if(datos[i]=='#'||datos[i]=='|'||datos[i]=='r'||datos[i]=='a')
						{
							datos_aux[j]=datos[i];
							j++;
							i++;
							if(datos[i]!='!')
							{
								numero=0x00;
								numero=((datos[i]&0x00FF)<<8);
								i++;
								numero=datos[i]|numero;
								memset(auxiliar, 0, 5);
								itoa(numero,auxiliar);
								for(z=0;z<strlen(auxiliar);z++){
									datos_aux[j]=auxiliar[z];
									j++;
								}
							}else{
								datos_aux[j]=datos[i];
								j++;
								i--;
							}
						}else{
							datos_aux[j]=datos[i];
							j++;
						}
						i++;
					}
					datos_aux[j]=datos[i];
					fin=0;
					indice_aux=0;
					while(fin==0)
					{
							datos_ble[0]='&';
							i=1;
							while((fin==0)&&(i<20))
							{
								datos_ble[i]=datos_aux[indice_aux];
								if(datos_aux[indice_aux]=='!'){
									fin=1;
									datos_ble[i]='$';
								}
								i++;
								indice_aux++;
							}
							j+=19;
							err_code = ble_mag_string_send(&m_mag, datos_ble, i);
							memset( datos_ble, 0, 20 );
							if (err_code != NRF_ERROR_INVALID_STATE)
							{
								APP_ERROR_CHECK(err_code);
							}
					}	
				break;
			}
		}
}

/**@brief Initialize MAGNETOMETER 3110 Service.
 *
 */
/**@snippet [Handling the data received over BLE] */
static void services_init(void)
{		
		SEGGER_RTT_WriteString(0, "I am in Services_init!\r\n");
    uint32_t       err_code;
    ble_mag_init_t mag_init;
    
    memset(&mag_init, 0, sizeof(mag_init));

    mag_init.data_handler = mag_data_handler;
    
    err_code = ble_mag_init(&m_mag, &mag_init);
    APP_ERROR_CHECK(err_code);
}


/**[Disabling peripherals to obtain low current] */
static void disable_peripherals(void)
{		
		NRF_SPI0-> ENABLE = 0;
		NRF_SPI0-> POWER = 0;
		NRF_UART0->TASKS_STOPTX = 1;
		NRF_UART0->TASKS_STOPRX = 1;
		NRF_UART0->ENABLE = 0;
		NRF_UART0->POWER = 0;
		NRF_TIMER0-> POWER = 0;
		NRF_TIMER1-> POWER = 0;
		NRF_TIMER2-> POWER = 0;
}


int main(void)
{		
		SEGGER_RTT_WriteString(0, "Hello World from SEGGER!\r\n");
    uint32_t err_code;
		
    // Initialize.
    APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_MAX_TIMERS, APP_TIMER_OP_QUEUE_SIZE, false);
		app_timer_create(&timer_ID,APP_TIMER_MODE_REPEATED,TIMER0_IRQHandler);
		app_timer_create(&TIMER0_Advertise,APP_TIMER_MODE_REPEATED,TIMER0_Advertise_init);
		twi_master_init();
		disable_peripherals();
		configuration();
    ble_stack_init();
	
		nombre[0] = 'A';
		nombre[1] = 'M';
		nombre[2] = 'S';
		
		gap_params_init();
    services_init();
    advertising_init();
    conn_params_init();
	
    err_code = ble_advertising_start(BLE_ADV_MODE_FAST);
    APP_ERROR_CHECK(err_code);
		sd_ble_gap_tx_power_set(4);
  
    for (;;)
    { 
      power_manage();
    }
}
